{"pages":[],"posts":[{"title":"git常用命令","text":"git 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//克隆git clone git@地址//查看状态git status//查看本地和远程分支，当前分支git branch -a//创建文件 test.texttouch test.txt//添加修改到本地仓库git add .//本次提交注释git commit -m \"注释内容\"//查看远程仓库git remote -v//推送到远程主分支（master）git push origin master//创建新的分支(复制master分支内容)git checkout -b 分支名称//切换到master分支git checkout master//拉取别的分支到master分支合并分支（可能会冲突）git merge 分支名称//删除本地分支git branch -D 分支名//删除远程分支git push origin :分支名//回退上次提交git reset --hard head^//查看提交日志(git log)git reflog//回退1 谨慎使用 指定的提交（执行git reflog 查看版本号）复制指定的版本号 git reset --hard 版本号//回退2 通过反做创建一个新的版本，这个版本的内容与我们要回退到的目标版本一样git revert 版本号git revert OLDER_COMMIT^..NEWER_COMMIT","link":"/2018/06/12/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"title":"hexo用法","text":"欢迎来到河西！这是你的第一份工作。查看文档以获取更多信息。如果您在使用Hexo时遇到任何问题，可以在故障排除中找到答案，也可以在GitHub上询问我。 Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 快速启动创建新帖子1$ hexo new \"My New Post\" More info: Writing 运行服务器1$ hexo server More info: Server 生成静态文件1$ hexo generate More info: Generating 部署到远程站点1$ hexo deploy More info: Deployment","link":"/2016/02/12/hexo%E7%94%A8%E6%B3%95/"},{"title":"js检查对象类型","text":"js检查对象类型 1234567891011121314151617181920212223242526272829303132333435hasOwnProperty 此方法无法检查该对象的原型链中是否具有该属性 object.hasOwnProperty(proName)constructor 属性返回对创建此对象的数组函数的引用 属性值是指向创建当前实例的对象的 [].constructor == Array //true Object.constructor == Object //false 原型链被改变会报错 var arr = []; arr.__proto__ = String arr.constructor == Array //falseinstanceof 检测这个实例对象是不是这个方法new出来的 [] instanceof Array //true Number instanceof Number //false String instanceof String //false Object instanceof Object //true Function instanceof Function //true Function instanceof Object //true function Foo(){} Foo instanceof Function //true Foo instanceof Foo //false 原型链改变会报错 var arr = [] arr.__proto__ = String arr instanceof Array //falsetypeof 用于检测基本类型 typeof undefined;//=&gt; undefined typeof 'a';//=&gt; string typeof 1;//=&gt; number typeof true;//=&gt; boolean typeof {};//=&gt; object typeof [];//=&gt; object typeof function() {};//=&gt; function typeof null;//=&gt; object","link":"/2019/12/12/js%E6%A3%80%E6%9F%A5%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/"},{"title":"JavaScript一些知识点实例","text":"JavaScript一些知识点实例 原型链与继承123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354 //基类 原型链 继承function Person(name,age){//人类 基类 this.name = name; this.age = age;}Person.prototype.hi = function(){ console.log('hi my name is'+this.name+'my age is'+this.age);}Person.prototype.LEGS_NUM = 2;Person.prototype.ARMS_NUM = 2;Person.prototype.walk = function(){ console.log(this.name+'is walking..');}//工人 构造函数function Worker(name,age,workerNum){ //Worker对象执行Person函数 Person.call(this,name,age); this.workerNum = workerNum;}//这样继承会造成基类原型中的方法和构造函数原型的方法同名时 基类原型方法会被改变Worker.prototype = Person.prototype;Worker.prototype.say = function(){ console.log(this.name+'say:我是工人')}function Student(name,age,className){//学生 构造函数 Person.call(this,name,age);//Student对象执行Person函数 this.className = className;}// Student.prototype = Person.prototype;//这样继承会造成基类原型被改变//新建一个空对象复制基类 然后原型在被继承Student.prototype = Object.create(Person.prototype);Student.prototype.constructor = Student;Student.prototype.hi = function(){ console.log(this.name+'say:\"hello\"');}var xh = new Person('小红',11);var xq = new Worker('小强',30,120);var xm = new Student('小明',12,'001');console.log(Student.prototype.constructor)xm.hi();xh.hi();// xq.hi();alert(xm.LEGS_NUM) 关于事件委托123456789101112131415161718192021222324252627282930//事件委托 dom结构：#a(#b,#c),只给父级节点绑定事件通过事件冒泡委托给子级元素var aDiv = document.getElementById('a');function addEvent(ele,type,callback){ if(ele.addEventListener){ //默认false(true事件捕获，false事件冒泡) ele.addEventListener(type,callback,false); }else if(ele.attachEvent){//ie浏览器只支持事件冒泡 ele.attachEvent('on'+type,callback); }}function handler(e){ var e = e || window.event; console.log(e.target.id); switch(e.target.id){ case 'b': alert('hi'); break; case 'c': alert('hello'); break; } alert('word')}addEvent(aDiv,'click',handler); ##获取url传的参数 123456789101112131415161718function getRequest() { //获取url传的参数 //获取url中\"?\"符后的字串 var url = window.location.search; var theRequest = new Object(); if (url.indexOf(\"?\") != -1) { var str = url.substr(1); var strs = str.split(\"&amp;\"); for(var i = 0; i &lt; strs.length; i ++) { //就是这句的问题 theRequest[strs[i].split(\"=\")[0]]=decodeURI(strs[i].split(\"=\")[1]); //之前用了unescape()会出现乱码 } } return theRequest; }var Request = getRequest() ##数字效果 123456789101112131415161718192021222324252627282930313233 //数字的效果慢慢变大function numAnimation(id){ var num = $(id).html(); var time = 50; var i = 0; var f = num - parseInt(num); var fn = f/20; var n = parseInt(num / 20); myTime(time) function myTime(time){ setTimeout(function(){ i = i + n; f = f + fn; // debugger if(i &lt; num - n){ if(i &gt; n*10){ time = 80 } if(i &gt; n*15){ time = 130 } if(f == 0){ $(id).html(i+'.00') }else{ $(id).html(i+Number(f.toFixed(2))) } myTime(time) }else{ $(id).html(num) } },time) } } ##表单验证 12345678910111213141516171819202122function verification(pattern,value){//表单验证 switch(pattern) { case 'required': pattern = /\\S+/i;break;//必填 case 'email': pattern = /^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)+$/i;break;//邮箱 case 'qq': pattern = /^[1-9][0-9]{4,}$/i;break;//qq case 'id': pattern = /^\\d{15}(\\d{2}[0-9x])?$/i;break;//身份证 case 'ip': pattern = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/i;break;//IP地址 case 'zip': pattern = /^\\d{6}$/i;break; case 'mobi': pattern = /^1[3|4|5|7|8][0-9]\\d{8}$/;break;//手机号 case 'phone': pattern = /^((\\d{3,4})|\\d{3,4}-)?\\d{3,8}(-\\d+)*$/i;break;//电话 case 'url': pattern = /^[a-zA-z]+:\\/\\/(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))+(\\/?\\S*)?$/i;break;//网址 case 'date': pattern = /^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$/i;break;//日期 case 'datetime': pattern = /^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29) (?:(?:[0-1][0-9])|(?:2[0-3])):(?:[0-5][0-9]):(?:[0-5][0-9])$/i;break;//日期和时间 case 'int': pattern = /^\\d+$/i;break;//整形 case 'float': pattern = /^\\d+\\.?\\d*$/i;break;//浮点数 case 'percent': pattern = /^[1-9][0-9]*$/;break;//百分数 } pattern = new RegExp(pattern) return pattern.test(value) } 回到顶部123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657function scroll_up(Obj){//回到顶部 var a,b,c,$jsObj; if(Obj.length){ $jsObj = Obj[0]; a = Obj.scrollTop();//滚动条y轴上的距离 b = $jsObj.clientHeight || document.body.clientHeight;//可视区域的高度 c = $jsObj.scrollHeight || document.body.scrollHeight;//可视化的高度与溢出的距离（总高度） }else{ $jsObj = this; a = document.documentElement.scrollTop || Obj.scrollTop;//滚动条y轴上的距离 b = document.documentElement.clientHeight || Obj.clientHeight;//可视区域的高度 c = document.documentElement.scrollHeight || Obj.scrollHeight;//可视化的高度与溢出的距离（总高度） } var c2 = c/2; if(a+b &gt;= c2 &amp;&amp; c2 &gt;= b){ if(document.getElementById('back_top') == null){ var oDiv = document.createElement('div'); oDiv.style.width = '40px'; oDiv.style.height = '40px'; oDiv.style.borderRadius = '40px'; oDiv.style.background = 'url({skin:imgs/back_top1.png}) no-repeat 0'; oDiv.style.backgroundSize = '40px'; oDiv.style.position = 'fixed'; oDiv.style.zIndex = 9999; oDiv.style.right = '5px'; oDiv.style.bottom = '80px'; document.body.appendChild(oDiv); var back_top = document.createAttribute('id'); back_top.nodeValue = 'back_top'; oDiv.setAttributeNode(back_top) oDiv.onclick = function(){ scrollAnimation(a) } }else{ document.getElementById('back_top').style.display = 'block'; } }else if(a+b &lt;= c2 &amp;&amp; document.getElementById('back_top') != null){ document.getElementById('back_top').style.display = 'none'; } function scrollAnimation(a){ myTimeout() // debugger function myTimeout(){ a = parseInt(a - a/10); if(parseInt(a/2) &gt;= 4 ){ $jsObj.scrollTo(0,a) setTimeout(myTimeout,10) }else{ $jsObj.scrollTo(0,0) } } }} ajax上传文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051// 获取文件function addFile() { document.getElementById('test1').value = \"\"; var file = document.querySelector('input[type=file]').files[0];//IE10以下不支持 var typeStr=\"image/jpg,image/png,image/gif,image/jpeg\"; if(typeStr.indexOf(file.type)&gt;=0){ document.getElementById('test1').value = file.name; if (file.size &gt; 2097152) { alert(\"上传的文件不能大于2M\"); return; }else{ upload(path,file) } }else{ alert(\"请上传格式为jpg、png、gif、jpeg的图片\"); }}//上传文件function upload(path,theFormFile) { var fd = new FormData();//使用FormData必须使用form标签 fd.append('file1', theFormFile);//上传的文件： 键名，键值 var url = path;//接口 url = url ? url : ''; var XHR = null; if (window.XMLHttpRequest) { // 非IE内核 XHR = new XMLHttpRequest(); } else if (window.ActiveXObject) { // IE内核，这里早期IE版本不同，具体可以查下 XHR = new ActiveXObject(\"Microsoft.XMLHTTP\"); } else { XHR = null; } if (XHR) { XHR.open(\"POST\", url); XHR.onreadystatechange = function() { if (XHR.readyState == 4 &amp;&amp; XHR.status == 200) { var resultValue = XHR.responseText; var data = JSON.parse(resultValue); XHR = null; } } XHR.send(fd); }}; ##上传图片时为图片添加预览图 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364jQuery.fn.extend({//上传图片时为图片添加预览图 uploadPreview: function (opts) { var _self = this,//原生file对象 _this = $(this);//jq file对象 opts = jQuery.extend({//img对象 Img: \"zz_i\", Width: 100, Height: 100, ImgType: [\"gif\", \"jpeg\", \"jpg\", \"bmp\", \"png\"], Callback: function () {} }, opts || {}); _self.getObjectURL = function (file) { var url = null; if (window.createObjectURL != undefined) { url = window.createObjectURL(file) } else if (window.URL != undefined) { url = window.URL.createObjectURL(file) } else if (window.webkitURL != undefined) { url = window.webkitURL.createObjectURL(file) } return url }; _this.change(function () { if (this.value) { if (!RegExp(\"\\.(\" + opts.ImgType.join(\"|\") + \")$\", \"i\").test(this.value.toLowerCase())) { alert(\"选择文件错误,图片类型必须是\" + opts.ImgType.join(\"，\") + \"中的一种\"); this.value = \"\"; return false } if ($.support.msie) { debugger try { $(\"#\" + opts.Img).attr('src', _self.getObjectURL(this.files[0])) } catch (e) { var src = \"\"; var obj = $(\"#\" + opts.Img); var div = obj.parent(\"div\")[0]; _self.select(); if (top != self) { window.parent.document.body.focus() } else { _self.blur() } src = document.selection.createRange().text; document.selection.empty(); obj.hide(); obj.parent(\"div\").css({ 'filter': 'progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale)', 'width': opts.Width + 'px', 'height': opts.Height + 'px' }); div.filters.item(\"DXImageTransform.Microsoft.AlphaImageLoader\").src = src } } else { $(\"#\" + opts.Img).attr('src', _self.getObjectURL(this.files[0])) } opts.Callback() } }) }});$(file的id).uploadPreview({ Img: 图片的id , Width: 120, Height: 120 });","link":"/2016/12/01/js%E5%AE%9E%E4%BE%8B/"},{"title":"Nodejs","text":"#一些nodejs知识 基于 Chrome V8 引擎的 JavaScript 运行环境 特点：单线程 异步非阻塞I/O 事件驱动 适合处理I/O不适合大量计算 容易阻塞 服务器 npm install http-server -g 关于npm错误 ----&gt; npm ERR! Cannot read property &apos;resolve&apos; of undefined npm ERR! A complete log of this run can be found in: 解决方法：卸载nodejs 并清空nodejs安装目录所以文件从新安装 事件 var events = require(&apos;events&apos;);//事件模块 //var util = require(&apos;util&apos;);//工具库 //var Person = function(name) { // this.name = name //} //util.inherits(Person, events.EventEmitter);//工具库里的继承 可用es6类class代替 var myEmitter = new events.EventEmitter();//注册事件对象 myEmitter.on(&apos;someEvent&apos;,function(msg){//绑定事件 console.log(msg) }) myEmitter.emit(&apos;someEvent&apos;,&apos;holl world!&apos;)//触发事件 读文件 fs.readFile(&apos;路径&apos;,&apos;utf8&apos;,callback(err,data){}) //异步 var a = fs.readFileSync(&apos;路径&apos;,&apos;utf8&apos;) //同步 写文件 fs.writeFile(&apos;路径&apos;,&apos;内容&apos;,callback) //异步 fs.writeFileSync(&apos;路径&apos;,&apos;内容&apos;,&apos;utf8&apos;) //同步 创建目录 fs.mkdir(&apos;目录名称&apos;, callback) 删除目录&amp;文件 fs.unlink(&quot;删除&quot;, callback) 流 和 管道（输入输出ye是流 ） //流可以是可读的、可写的、或者可读可写的。 所有的流都是 EventEmitter 的实例 // 流和管道 var fs = require(&apos;fs&apos;); var myReadStream = fs.createReadStream(__dirname + &apos;/readMe.txt&apos;);//创建可读流 var myWriteStream = fs.createWriteStream(__dirname + &apos;/writeMe.txt&apos;);//创建可写流 myReadStream.pipe(myWriteStream); var writeData = &quot;hello world&quot;; myWriteStream.write(writeData); myWriteStream.end(); myWriteStream.on(&apos;finish&apos;, function() { console.log(&apos;finished&apos;); }) myReadStream.setEncoding(&apos;utf8&apos;); var data = &quot;&quot; myReadStream.on(&apos;data&apos;, function(chunk) { // data += chunk; myWriteStream.write(chunk); }) myReadStream.on(&apos;end&apos;, function() { // console.log(data); }) // 压缩 var crypto = require(&apos;crypto&apos;); var fs = require(&apos;fs&apos;); var zlib = require(&apos;zlib&apos;); var password = new Buffer(process.env.PASS || &apos;password&apos;); var encryptStream = crypto.createCipher(&apos;aes-256-cbc&apos;, password); var gzip = zlib.createGzip(); var readStream = fs.createReadStream(__dirname + &quot;/readMe.txt&quot;); // current file var writeStream = fs.createWriteStream(__dirname + &apos;/out.gz&apos;); readStream // reads current file .pipe(encryptStream) // encrypts .pipe(gzip) // compresses .pipe(writeStream) // writes to out file .on(&apos;finish&apos;, function() { // all done console.log(&apos;done&apos;); }); // 解压 var crypto = require(&apos;crypto&apos;); var fs = require(&apos;fs&apos;); var zlib = require(&apos;zlib&apos;); var password = new Buffer(process.env.PASS || &apos;password&apos;); var decryptStream = crypto.createDecipher(&apos;aes-256-cbc&apos;, password); var gzip = zlib.createGunzip(); var readStream = fs.createReadStream(__dirname + &apos;/out.gz&apos;); readStream // reads current file .pipe(gzip) // uncompresses .pipe(decryptStream) // decrypts .pipe(process.stdout) // writes to terminal .on(&apos;finish&apos;, function() { // finished console.log(&apos;done&apos;); });","link":"/2019/12/12/Nodejs/"},{"title":"React安装","text":"#React 脚手架的安装 Node安装好之后，你就可以使用npm命令来安装脚手架工具了，方法很简单，只要打开终端，然后输入下面的命令就可以了。123npm install -g create-react-appcreate-react-app demo01 //用脚手架创建React项目","link":"/2019/12/17/React%E5%AE%89%E8%A3%85/"},{"title":"Taro","text":"使用Taro，我们可以只书写一套代码，再通过 Taro 的编译工具，将源代码分别编译出可以在不同端（微信/百度/支付宝/字节跳动/QQ小程序、快应用、H5、React-Native 等）运行的代码 遇到的问题 1 Taro.request()跨域问题 h5 发请求会报跨域问题，需要使用代理转换请求 1234567891011121314151617181920212223242526//例子：config/index.js //h5：添加 devServer: { host: 'localhost', port: 10086, proxy: { '/api': { target: 'http://tujia.diandou.com', // 服务端地址 changeOrigin: true } } } //请求： Taro.request({ url: '/api/ouse', data: { user_id: '1' }, method:'GET', mode:'no-cors', header: { 'content-type': 'application/json' }, success(res){} }）","link":"/2019/12/17/Taro/"},{"title":"Vue安装总结","text":"vue cli 环境搭建 1.必须安装nodejs 使用node中的npm包管理工具下载vue-cli 1.安装完nodejs后可下载国内cnpm淘宝镜像 2.新建项目文件夹 打开cmd cd到刚新建项目文件夹中 （cd..返回上一层目录） 例如：d盘下新建了一个vue1文件夹输入cmd中输入以下命令 C:\\Users\\Administrator&gt;d: //进入d盘 D:\\&gt;cd vue1 //进入项目文件夹 3.D:\\vue1&gt;cnpm install vue-cli -g //安装vue-cli 4.D:\\vue1&gt;vue init &lt;template-name&gt; &lt;project-name&gt; //表示我要用vue-cli来初始化项目 &lt;template-name&gt;：表示模板名称，vue-cli官方为我们提供了5种模板， webpack - 全面的webpack+vue-loader的模板，功能包括热加载，linting,检测和CSS扩展。 webpack - simple 简单webpack+vue-loader的模板，不含其他功能，快速的搭建vue的开发环境。 browserify - 全面的Browserify+vueify 的模板，功能包括热加载，linting,单元检测。 browserify - simple - 简单Browserify+vueify的模板，不包含其他功能，让你快速的搭建vue的开发环境。 simple - 最简单的单页应用模板。 &lt;project-name&gt;：标识项目名称 5.D:\\vue1&gt;npm install //安装项目依赖包，也就是安装package.json里的包 6.npm run dev //运行程序","link":"/2019/12/17/Vue/"},{"title":"ES7的async和await","text":"async是让方法变成异步 返回Promise对象 await等待async方法执行完毕 也可以接受普通方法和promise对象 12345678910111213141516171819202122232425262728293031function getSomething(){ return 'something';} async function testAsync(){ return 'Hello async';} async function test(){ //await 因为会阻塞所以函数必须在async 函数体内使用 const v1=await getSomething(); //等待异步async getSomething完成在执行 const v2=await testAsync(); console.log(v1,v2); //something,Hello async} test();//await接受promise对象function takeLongTime() { return new Promise(resolve =&gt; { setTimeout(() =&gt; resolve(\"long_time_value\"), 1000); });} async function test() { const v = await takeLongTime(); console.log(v); //long_time_value} test();","link":"/2019/12/17/ES7%E7%9A%84async%E5%92%8Cawait/"},{"title":"ES6的Promise和import","text":"#ES6的Promise 和 import 获取异步数据，摆脱无限回调地狱 是异步编程的一种解决方案 从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。 Promise 异步操作有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。除了异步操作的结果，任何其他操作都无法改变这个状态。 Promise 对象只有：从 pending 变为 fulfilled 和从 pending 变为 rejected 的状态改变。只要处于 fulfilled 和 rejected ，状态就不会再变了即 resolved（已定型）。 ###回调函数处理异步 123456789101112function callback() { var timeOut = Math.random * 2;//生成一个0-2之间的随机数，如果小于1，打印成功，否失败 if(timeOut&lt;1){ console.log('成功'); }else{ console.log('失败'); } }console.log('before setTimeout()');setTimeout(callback, 1000); // 1秒钟后调用callback函数console.log('after setTimeout()') ###promise处理异步 1234567891011121314151617var printNum = new Promise(function(resolve,reject){//成功resolve 失败reject setTimeout(function(){ var timeOut = Math.random * 2;//生成一个0-2之间的随机数，如果小于1，打印成功，否失败 if(timeOut&lt;1){ resolve('成功'); }else{ reject('失败'); } },100)})printNum.then(function(result){//成功调用 result结果 console.log(result)}).catch(function(result){//失败调用 result结果 console.log(result)}) ###promise对象串联 Promise还可以做更多的事情，比如，有若干个异步任务，需要先做任务1，如果成功后再做任务2，任何任务失败则不再继续并执行错误处理函数。 job1.then(job2).then(job3).catch(handleError);//job1、job2和job3都是Promise对象。 ###Promise.all 方法返回一个 Promise 实例，此实例在参数内所有的 promise 都“完成（resolved）”或参数中不包含 promise 时回调完成（resolve）； 如果参数中 promise 有一个失败（rejected），此实例回调失败（reject），失败原因的是第一个失败 promise 的结果。 Promise.all([promise1,promise2...]).then((values)=&gt;{}) #关于import 引入模块 如果引用相对路径，则直接寻找这个相对路径文件 export 出来的内容。 如果是绝对路径，则会依次寻找 node_modules 对应的地方。 如果路径最终是一个文件夹，则会首先观察文件夹下是否有 package.json ,如果有 package.json 则会去加载 main 字段指向的文件，如果没有 package.json ，则会在这个文件夹下寻找 index 文件并加载。","link":"/2019/12/17/Promise/"},{"title":"reactHooks","text":"useState useEffect 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061import React, { useState, useEffect } from 'react'import { BrowserRouter as Router, Route, Link } from \"react-router-dom\"// React Hooks 解决了props不能修改和不用写class组件function Example(props){ const [ count , setCount ] = useState(0); // console.log(props) //Hooks 副作用（生命周期函数） 组件载入 和 数据更新触发 useEffect(()=>{ console.log(\"count = \" + count) },[count]) // 只有数组里的变量改变时才会执行 useEffect return ( 你点击了{ count }下 {setCount(count+1)}}>点击 首页 列表 )}function Index(){ //useEffect的第二个参数 空数组[]时，只有当前组件 被调用 或 被销毁 才会调用 useEffect(()=>{ console.log('你进入了Index') // 返回一个函数的形式进行解绑（离开index） 执行 return ()=>{ console.log('你离开了Index------') } },[]) return zxuhang.github.io}function List(){ useEffect(()=>{ console.log('你进入了List') return ()=>{ console.log('你离开了List------') } },[]) return this is a List page}export default Example; createContext useContext1234567891011121314151617181920212223242526272829303132333435363738394041import React, { useState, createContext, useContext } from 'react'// React Hooks父子组件传值 父组件createContext创建 和 子组件useContext接受//创建上下文const CountContext = createContext()function Example(props){ const [ count , setCount ] = useState(0); const add20 = (n)=>{ // console.log(n) setCount(count+n) } const obj = { count, add20 } return ( 你点击了{ count }下 {setCount(count+1)}}>点击 {/* 向子组件传值 */} )}function Counter(){ // 接受上下文父组件值 const {count, add20} = useContext(CountContext) return ({ // 向父组件传值 add20(20) }}>{count})}export default Example;","link":"/2019/12/25/reactHooks/"}],"tags":[{"name":"git","slug":"git","link":"/tags/git/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"js","slug":"js","link":"/tags/js/"},{"name":"nodejs","slug":"nodejs","link":"/tags/nodejs/"},{"name":"React","slug":"React","link":"/tags/React/"},{"name":"Vue","slug":"Vue","link":"/tags/Vue/"},{"name":"异步","slug":"异步","link":"/tags/%E5%BC%82%E6%AD%A5/"},{"name":"ES7","slug":"ES7","link":"/tags/ES7/"},{"name":"ES6","slug":"ES6","link":"/tags/ES6/"},{"name":"Promise","slug":"Promise","link":"/tags/Promise/"}],"categories":[{"name":"git","slug":"git","link":"/categories/git/"},{"name":"JavaScript","slug":"JavaScript","link":"/categories/JavaScript/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"React","slug":"React","link":"/categories/React/"},{"name":"Vue","slug":"Vue","link":"/categories/Vue/"},{"name":"ES7","slug":"ES7","link":"/categories/ES7/"},{"name":"ES6","slug":"ES6","link":"/categories/ES6/"}]}