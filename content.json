{"pages":[],"posts":[{"title":"git常用命令","text":"git 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//克隆git clone git@地址//查看状态git status//查看本地和远程分支，当前分支git branch -a//创建文件 test.texttouch test.txt//添加修改到本地仓库git add .//本次提交注释git commit -m \"注释内容\"//查看远程仓库git remote -v//推送到远程主分支（master）git push origin master//创建新的分支(复制master分支内容)git checkout -b 分支名称//切换到master分支git checkout master//拉取别的分支到master分支合并分支（可能会冲突）git merge 分支名称//删除本地分支git branch -D 分支名//删除远程分支git push origin :分支名//回退上次提交git reset --hard head^//查看提交日志(git log)git reflog//回退1 谨慎使用 指定的提交（执行git reflog 查看版本号）复制指定的版本号 git reset --hard 版本号//回退2 通过反做创建一个新的版本，这个版本的内容与我们要回退到的目标版本一样git revert 版本号git revert OLDER_COMMIT^..NEWER_COMMIT","link":"/2018/06/12/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"title":"hexo用法","text":"欢迎来到河西！这是你的第一份工作。查看文档以获取更多信息。如果您在使用Hexo时遇到任何问题，可以在故障排除中找到答案，也可以在GitHub上询问我。 Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 快速启动创建新帖子1$ hexo new \"My New Post\" More info: Writing 运行服务器1$ hexo server More info: Server 生成静态文件1$ hexo generate More info: Generating 部署到远程站点1$ hexo deploy More info: Deployment","link":"/2019/12/11/hexo%E7%94%A8%E6%B3%95/"},{"title":"js检查对象类型","text":"js检查对象类型 1234567891011121314151617181920212223242526272829303132333435hasOwnProperty 此方法无法检查该对象的原型链中是否具有该属性 object.hasOwnProperty(proName)constructor 属性返回对创建此对象的数组函数的引用 属性值是指向创建当前实例的对象的 [].constructor == Array //true Object.constructor == Object //false 原型链被改变会报错 var arr = []; arr.__proto__ = String arr.constructor == Array //falseinstanceof 检测这个实例对象是不是这个方法new出来的 [] instanceof Array //true Number instanceof Number //false String instanceof String //false Object instanceof Object //true Function instanceof Function //true Function instanceof Object //true function Foo(){} Foo instanceof Function //true Foo instanceof Foo //false 原型链改变会报错 var arr = [] arr.__proto__ = String arr instanceof Array //falsetypeof 用于检测基本类型 typeof undefined;//=&gt; undefined typeof 'a';//=&gt; string typeof 1;//=&gt; number typeof true;//=&gt; boolean typeof {};//=&gt; object typeof [];//=&gt; object typeof function() {};//=&gt; function typeof null;//=&gt; object","link":"/2019/12/12/js%E6%A3%80%E6%9F%A5%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/"},{"title":"JavaScript一些知识点实例","text":"JavaScript一些知识点实例 原型链与继承123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051//基类 原型链 继承 function Person(name,age){//人类 基类 this.name = name; this.age = age; } Person.prototype.hi = function(){ console.log('hi my name is'+this.name+'my age is'+this.age); } Person.prototype.LEGS_NUM = 2; Person.prototype.ARMS_NUM = 2; Person.prototype.walk = function(){ console.log(this.name+'is walking..'); } function Worker(name,age,workerNum){//工人 构造函数 Person.call(this,name,age);//Worker对象执行Person函数 this.workerNum = workerNum; } Worker.prototype = Person.prototype;//这样继承会造成基类原型中的方法和构造函数原型的方法同名时 基类原型方法会被改变 Worker.prototype.say = function(){ console.log(this.name+'say:我是工人') } function Student(name,age,className){//学生 构造函数 Person.call(this,name,age);//Student对象执行Person函数 this.className = className; } // Student.prototype = Person.prototype;//这样继承会造成基类原型被改变 Student.prototype = Object.create(Person.prototype);//新建一个空对象复制基类 然后原型在被继承 Student.prototype.constructor = Student; Student.prototype.hi = function(){ console.log(this.name+'say:\"hello\"'); } var xh = new Person('小红',11); var xq = new Worker('小强',30,120); var xm = new Student('小明',12,'001'); console.log(Student.prototype.constructor) xm.hi(); xh.hi(); // xq.hi(); alert(xm.LEGS_NUM) 关于事件委托123456789101112131415161718192021222324252627//事件委托 dom结构：#a(#b,#c),只给父级节点绑定事件通过事件冒泡委托给子级元素var aDiv = document.getElementById('a'); function addEvent(ele,type,callback){ if(ele.addEventListener){ ele.addEventListener(type,callback,false);//默认false(true事件捕获，false事件冒泡) }else if(ele.attachEvent){//ie浏览器只支持事件冒泡 ele.attachEvent('on'+type,callback); } } function handler(e){ var e = e || window.event; console.log(e.target.id); switch(e.target.id){ case 'b': alert('hi'); break; case 'c': alert('hello'); break; } alert('word') } addEvent(aDiv,'click',handler); ##获取url传的参数 1234567891011121314151617function getRequest() { //获取url传的参数 var url = window.location.search; //获取url中\"?\"符后的字串 var theRequest = new Object(); if (url.indexOf(\"?\") != -1) { var str = url.substr(1); var strs = str.split(\"&amp;\"); for(var i = 0; i &lt; strs.length; i ++) { //就是这句的问题 theRequest[strs[i].split(\"=\")[0]]=decodeURI(strs[i].split(\"=\")[1]); //之前用了unescape()会出现乱码 } } return theRequest; }var Request = getRequest() ##数字效果 123456789101112131415161718192021222324252627282930313233function numAnimation(id){ //数字的效果慢慢变大 var num = $(id).html(); var time = 50; var i = 0; var f = num - parseInt(num); var fn = f/20; var n = parseInt(num / 20); myTime(time) function myTime(time){ setTimeout(function(){ i = i + n; f = f + fn; // debugger if(i &lt; num - n){ if(i &gt; n*10){ time = 80 } if(i &gt; n*15){ time = 130 } if(f == 0){ $(id).html(i+'.00') }else{ $(id).html(i+Number(f.toFixed(2))) } myTime(time) }else{ $(id).html(num) } },time) } } ##表单验证 12345678910111213141516171819202122function verification(pattern,value){//表单验证 switch(pattern) { case 'required': pattern = /\\S+/i;break;//必填 case 'email': pattern = /^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)+$/i;break;//邮箱 case 'qq': pattern = /^[1-9][0-9]{4,}$/i;break;//qq case 'id': pattern = /^\\d{15}(\\d{2}[0-9x])?$/i;break;//身份证 case 'ip': pattern = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/i;break;//IP地址 case 'zip': pattern = /^\\d{6}$/i;break; case 'mobi': pattern = /^1[3|4|5|7|8][0-9]\\d{8}$/;break;//手机号 case 'phone': pattern = /^((\\d{3,4})|\\d{3,4}-)?\\d{3,8}(-\\d+)*$/i;break;//电话 case 'url': pattern = /^[a-zA-z]+:\\/\\/(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))+(\\/?\\S*)?$/i;break;//网址 case 'date': pattern = /^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$/i;break;//日期 case 'datetime': pattern = /^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29) (?:(?:[0-1][0-9])|(?:2[0-3])):(?:[0-5][0-9]):(?:[0-5][0-9])$/i;break;//日期和时间 case 'int': pattern = /^\\d+$/i;break;//整形 case 'float': pattern = /^\\d+\\.?\\d*$/i;break;//浮点数 case 'percent': pattern = /^[1-9][0-9]*$/;break;//百分数 } pattern = new RegExp(pattern) return pattern.test(value) } 回到顶部123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657function scroll_up(Obj){//回到顶部 var a,b,c,$jsObj; if(Obj.length){ $jsObj = Obj[0]; a = Obj.scrollTop();//滚动条y轴上的距离 b = $jsObj.clientHeight || document.body.clientHeight;//可视区域的高度 c = $jsObj.scrollHeight || document.body.scrollHeight;//可视化的高度与溢出的距离（总高度） }else{ $jsObj = this; a = document.documentElement.scrollTop || Obj.scrollTop;//滚动条y轴上的距离 b = document.documentElement.clientHeight || Obj.clientHeight;//可视区域的高度 c = document.documentElement.scrollHeight || Obj.scrollHeight;//可视化的高度与溢出的距离（总高度） } var c2 = c/2; if(a+b &gt;= c2 &amp;&amp; c2 &gt;= b){ if(document.getElementById('back_top') == null){ var oDiv = document.createElement('div'); oDiv.style.width = '40px'; oDiv.style.height = '40px'; oDiv.style.borderRadius = '40px'; oDiv.style.background = 'url({skin:imgs/back_top1.png}) no-repeat 0'; oDiv.style.backgroundSize = '40px'; oDiv.style.position = 'fixed'; oDiv.style.zIndex = 9999; oDiv.style.right = '5px'; oDiv.style.bottom = '80px'; document.body.appendChild(oDiv); var back_top = document.createAttribute('id'); back_top.nodeValue = 'back_top'; oDiv.setAttributeNode(back_top) oDiv.onclick = function(){ scrollAnimation(a) } }else{ document.getElementById('back_top').style.display = 'block'; } }else if(a+b &lt;= c2 &amp;&amp; document.getElementById('back_top') != null){ document.getElementById('back_top').style.display = 'none'; } function scrollAnimation(a){ myTimeout() // debugger function myTimeout(){ a = parseInt(a - a/10); if(parseInt(a/2) &gt;= 4 ){ $jsObj.scrollTo(0,a) setTimeout(myTimeout,10) }else{ $jsObj.scrollTo(0,0) } } }} ajax上传文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051// 获取文件function addFile() { document.getElementById('test1').value = \"\"; var file = document.querySelector('input[type=file]').files[0];//IE10以下不支持 var typeStr=\"image/jpg,image/png,image/gif,image/jpeg\"; if(typeStr.indexOf(file.type)&gt;=0){ document.getElementById('test1').value = file.name; if (file.size &gt; 2097152) { alert(\"上传的文件不能大于2M\"); return; }else{ upload(path,file) } }else{ alert(\"请上传格式为jpg、png、gif、jpeg的图片\"); }}//上传文件function upload(path,theFormFile) { var fd = new FormData();//使用FormData必须使用form标签 fd.append('file1', theFormFile);//上传的文件： 键名，键值 var url = path;//接口 url = url ? url : ''; var XHR = null; if (window.XMLHttpRequest) { // 非IE内核 XHR = new XMLHttpRequest(); } else if (window.ActiveXObject) { // IE内核，这里早期IE版本不同，具体可以查下 XHR = new ActiveXObject(\"Microsoft.XMLHTTP\"); } else { XHR = null; } if (XHR) { XHR.open(\"POST\", url); XHR.onreadystatechange = function() { if (XHR.readyState == 4 &amp;&amp; XHR.status == 200) { var resultValue = XHR.responseText; var data = JSON.parse(resultValue); XHR = null; } } XHR.send(fd); }}; ##上传图片时为图片添加预览图 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364jQuery.fn.extend({//上传图片时为图片添加预览图 uploadPreview: function (opts) { var _self = this,//原生file对象 _this = $(this);//jq file对象 opts = jQuery.extend({//img对象 Img: \"zz_i\", Width: 100, Height: 100, ImgType: [\"gif\", \"jpeg\", \"jpg\", \"bmp\", \"png\"], Callback: function () {} }, opts || {}); _self.getObjectURL = function (file) { var url = null; if (window.createObjectURL != undefined) { url = window.createObjectURL(file) } else if (window.URL != undefined) { url = window.URL.createObjectURL(file) } else if (window.webkitURL != undefined) { url = window.webkitURL.createObjectURL(file) } return url }; _this.change(function () { if (this.value) { if (!RegExp(\"\\.(\" + opts.ImgType.join(\"|\") + \")$\", \"i\").test(this.value.toLowerCase())) { alert(\"选择文件错误,图片类型必须是\" + opts.ImgType.join(\"，\") + \"中的一种\"); this.value = \"\"; return false } if ($.support.msie) { debugger try { $(\"#\" + opts.Img).attr('src', _self.getObjectURL(this.files[0])) } catch (e) { var src = \"\"; var obj = $(\"#\" + opts.Img); var div = obj.parent(\"div\")[0]; _self.select(); if (top != self) { window.parent.document.body.focus() } else { _self.blur() } src = document.selection.createRange().text; document.selection.empty(); obj.hide(); obj.parent(\"div\").css({ 'filter': 'progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale)', 'width': opts.Width + 'px', 'height': opts.Height + 'px' }); div.filters.item(\"DXImageTransform.Microsoft.AlphaImageLoader\").src = src } } else { $(\"#\" + opts.Img).attr('src', _self.getObjectURL(this.files[0])) } opts.Callback() } }) } }); $(file的id).uploadPreview({ Img: 图片的id , Width: 120, Height: 120 });","link":"/2016/12/01/js%E5%AE%9E%E4%BE%8B/"}],"tags":[{"name":"git","slug":"git","link":"/tags/git/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"js","slug":"js","link":"/tags/js/"}],"categories":[{"name":"git","slug":"git","link":"/categories/git/"},{"name":"JavaScript","slug":"JavaScript","link":"/categories/JavaScript/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"}]}